// generated by ./ddl2cpp database_dump.txt ./src/login/postgresql/postgres
// openao::login::postgresql
#ifndef OPENAO_LOGIN_POSTGRESQL_POSTGRES_H
#define OPENAO_LOGIN_POSTGRESQL_POSTGRES_H

#include <sqlpp11/char_sequence.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/table.h>

namespace openao {
namespace login {
namespace postgresql {
namespace PublicAccount_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Username {
  struct _alias_t {
    static constexpr const char _literal[] = "username";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T username;
      T &operator()() { return username; }
      const T &operator()() const { return username; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Password {
  struct _alias_t {
    static constexpr const char _literal[] = "password";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T password;
      T &operator()() { return password; }
      const T &operator()() const { return password; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Slots {
  struct _alias_t {
    static constexpr const char _literal[] = "slots";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T slots;
      T &operator()() { return slots; }
      const T &operator()() const { return slots; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Pin {
  struct _alias_t {
    static constexpr const char _literal[] = "pin";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T pin;
      T &operator()() { return pin; }
      const T &operator()() const { return pin; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
}// namespace PublicAccount_

struct PublicAccount
    : sqlpp::table_t<PublicAccount, PublicAccount_::Id,
                     PublicAccount_::Username, PublicAccount_::Password,
                     PublicAccount_::Slots, PublicAccount_::Pin> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.account";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicAccount;
      T &operator()() { return publicAccount; }
      const T &operator()() const { return publicAccount; }
    };
  };
};
namespace PublicCharacter_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct AccountId {
  struct _alias_t {
    static constexpr const char _literal[] = "account_id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T accountId;
      T &operator()() { return accountId; }
      const T &operator()() const { return accountId; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Name {
  struct _alias_t {
    static constexpr const char _literal[] = "name";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T name;
      T &operator()() { return name; }
      const T &operator()() const { return name; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Title {
  struct _alias_t {
    static constexpr const char _literal[] = "title";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T title;
      T &operator()() { return title; }
      const T &operator()() const { return title; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Gender {
  struct _alias_t {
    static constexpr const char _literal[] = "gender";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T gender;
      T &operator()() { return gender; }
      const T &operator()() const { return gender; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct HairStyle {
  struct _alias_t {
    static constexpr const char _literal[] = "hair_style";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hairStyle;
      T &operator()() { return hairStyle; }
      const T &operator()() const { return hairStyle; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Height {
  struct _alias_t {
    static constexpr const char _literal[] = "height";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T height;
      T &operator()() { return height; }
      const T &operator()() const { return height; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct HairColor {
  struct _alias_t {
    static constexpr const char _literal[] = "hair_color";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hairColor;
      T &operator()() { return hairColor; }
      const T &operator()() const { return hairColor; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct SkinColor {
  struct _alias_t {
    static constexpr const char _literal[] = "skin_color";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T skinColor;
      T &operator()() { return skinColor; }
      const T &operator()() const { return skinColor; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct BirthdayMonth {
  struct _alias_t {
    static constexpr const char _literal[] = "birthday_month";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T birthdayMonth;
      T &operator()() { return birthdayMonth; }
      const T &operator()() const { return birthdayMonth; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct BirthdayDay {
  struct _alias_t {
    static constexpr const char _literal[] = "birthday_day";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T birthdayDay;
      T &operator()() { return birthdayDay; }
      const T &operator()() const { return birthdayDay; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Blood {
  struct _alias_t {
    static constexpr const char _literal[] = "blood";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T blood;
      T &operator()() { return blood; }
      const T &operator()() const { return blood; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Place {
  struct _alias_t {
    static constexpr const char _literal[] = "place";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T place;
      T &operator()() { return place; }
      const T &operator()() const { return place; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Job {
  struct _alias_t {
    static constexpr const char _literal[] = "job";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T job;
      T &operator()() { return job; }
      const T &operator()() const { return job; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Face {
  struct _alias_t {
    static constexpr const char _literal[] = "face";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T face;
      T &operator()() { return face; }
      const T &operator()() const { return face; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Personality {
  struct _alias_t {
    static constexpr const char _literal[] = "personality";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T personality;
      T &operator()() { return personality; }
      const T &operator()() const { return personality; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Level {
  struct _alias_t {
    static constexpr const char _literal[] = "level";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T level;
      T &operator()() { return level; }
      const T &operator()() const { return level; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Experience {
  struct _alias_t {
    static constexpr const char _literal[] = "experience";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T experience;
      T &operator()() { return experience; }
      const T &operator()() const { return experience; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Rank {
  struct _alias_t {
    static constexpr const char _literal[] = "rank";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T rank;
      T &operator()() { return rank; }
      const T &operator()() const { return rank; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Credits {
  struct _alias_t {
    static constexpr const char _literal[] = "credits";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T credits;
      T &operator()() { return credits; }
      const T &operator()() const { return credits; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Faction {
  struct _alias_t {
    static constexpr const char _literal[] = "faction";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T faction;
      T &operator()() { return faction; }
      const T &operator()() const { return faction; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Stage {
  struct _alias_t {
    static constexpr const char _literal[] = "stage";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T stage;
      T &operator()() { return stage; }
      const T &operator()() const { return stage; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct PositionX {
  struct _alias_t {
    static constexpr const char _literal[] = "position_x";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T positionX;
      T &operator()() { return positionX; }
      const T &operator()() const { return positionX; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct PositionY {
  struct _alias_t {
    static constexpr const char _literal[] = "position_y";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T positionY;
      T &operator()() { return positionY; }
      const T &operator()() const { return positionY; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Orientation {
  struct _alias_t {
    static constexpr const char _literal[] = "orientation";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T orientation;
      T &operator()() { return orientation; }
      const T &operator()() const { return orientation; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Head {
  struct _alias_t {
    static constexpr const char _literal[] = "head";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T head;
      T &operator()() { return head; }
      const T &operator()() const { return head; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Body {
  struct _alias_t {
    static constexpr const char _literal[] = "body";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T body;
      T &operator()() { return body; }
      const T &operator()() const { return body; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct MainHand {
  struct _alias_t {
    static constexpr const char _literal[] = "main_hand";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T mainHand;
      T &operator()() { return mainHand; }
      const T &operator()() const { return mainHand; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct OffHand {
  struct _alias_t {
    static constexpr const char _literal[] = "off_hand";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T offHand;
      T &operator()() { return offHand; }
      const T &operator()() const { return offHand; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Hand {
  struct _alias_t {
    static constexpr const char _literal[] = "hand";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hand;
      T &operator()() { return hand; }
      const T &operator()() const { return hand; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Feet {
  struct _alias_t {
    static constexpr const char _literal[] = "feet";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T feet;
      T &operator()() { return feet; }
      const T &operator()() const { return feet; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Back {
  struct _alias_t {
    static constexpr const char _literal[] = "back";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T back;
      T &operator()() { return back; }
      const T &operator()() const { return back; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Ride {
  struct _alias_t {
    static constexpr const char _literal[] = "ride";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T ride;
      T &operator()() { return ride; }
      const T &operator()() const { return ride; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Shape {
  struct _alias_t {
    static constexpr const char _literal[] = "shape";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T shape;
      T &operator()() { return shape; }
      const T &operator()() const { return shape; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct HpCurrent {
  struct _alias_t {
    static constexpr const char _literal[] = "hp_current";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hpCurrent;
      T &operator()() { return hpCurrent; }
      const T &operator()() const { return hpCurrent; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct HpTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "hp_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hpTotal;
      T &operator()() { return hpTotal; }
      const T &operator()() const { return hpTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct MpCurrent {
  struct _alias_t {
    static constexpr const char _literal[] = "mp_current";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T mpCurrent;
      T &operator()() { return mpCurrent; }
      const T &operator()() const { return mpCurrent; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct MpTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "mp_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T mpTotal;
      T &operator()() { return mpTotal; }
      const T &operator()() const { return mpTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SpCurrent {
  struct _alias_t {
    static constexpr const char _literal[] = "sp_current";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T spCurrent;
      T &operator()() { return spCurrent; }
      const T &operator()() const { return spCurrent; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SpTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "sp_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T spTotal;
      T &operator()() { return spTotal; }
      const T &operator()() const { return spTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Weight {
  struct _alias_t {
    static constexpr const char _literal[] = "weight";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T weight;
      T &operator()() { return weight; }
      const T &operator()() const { return weight; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AttackBase {
  struct _alias_t {
    static constexpr const char _literal[] = "attack_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T attackBase;
      T &operator()() { return attackBase; }
      const T &operator()() const { return attackBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AttackRight {
  struct _alias_t {
    static constexpr const char _literal[] = "attack_right";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T attackRight;
      T &operator()() { return attackRight; }
      const T &operator()() const { return attackRight; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AttackLeft {
  struct _alias_t {
    static constexpr const char _literal[] = "attack_left";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T attackLeft;
      T &operator()() { return attackLeft; }
      const T &operator()() const { return attackLeft; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct DefenseBase {
  struct _alias_t {
    static constexpr const char _literal[] = "defense_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T defenseBase;
      T &operator()() { return defenseBase; }
      const T &operator()() const { return defenseBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct DefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T defenseTotal;
      T &operator()() { return defenseTotal; }
      const T &operator()() const { return defenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SpellDefenseBase {
  struct _alias_t {
    static constexpr const char _literal[] = "spell_defense_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T spellDefenseBase;
      T &operator()() { return spellDefenseBase; }
      const T &operator()() const { return spellDefenseBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SpellDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "spell_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T spellDefenseTotal;
      T &operator()() { return spellDefenseTotal; }
      const T &operator()() const { return spellDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct RigorBase {
  struct _alias_t {
    static constexpr const char _literal[] = "rigor_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T rigorBase;
      T &operator()() { return rigorBase; }
      const T &operator()() const { return rigorBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct RigorTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "rigor_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T rigorTotal;
      T &operator()() { return rigorTotal; }
      const T &operator()() const { return rigorTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AgilityBase {
  struct _alias_t {
    static constexpr const char _literal[] = "agility_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T agilityBase;
      T &operator()() { return agilityBase; }
      const T &operator()() const { return agilityBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct AgilityTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "agility_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T agilityTotal;
      T &operator()() { return agilityTotal; }
      const T &operator()() const { return agilityTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct CriticalBase {
  struct _alias_t {
    static constexpr const char _literal[] = "critical_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T criticalBase;
      T &operator()() { return criticalBase; }
      const T &operator()() const { return criticalBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct CriticalTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "critical_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T criticalTotal;
      T &operator()() { return criticalTotal; }
      const T &operator()() const { return criticalTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct StaminaBase {
  struct _alias_t {
    static constexpr const char _literal[] = "stamina_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T staminaBase;
      T &operator()() { return staminaBase; }
      const T &operator()() const { return staminaBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct StaminaTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "stamina_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T staminaTotal;
      T &operator()() { return staminaTotal; }
      const T &operator()() const { return staminaTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SoulDefenseBase {
  struct _alias_t {
    static constexpr const char _literal[] = "soul_defense_base";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T soulDefenseBase;
      T &operator()() { return soulDefenseBase; }
      const T &operator()() const { return soulDefenseBase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct SoulDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "soul_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T soulDefenseTotal;
      T &operator()() { return soulDefenseTotal; }
      const T &operator()() const { return soulDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct ThunderAttackTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "thunder_attack_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T thunderAttackTotal;
      T &operator()() { return thunderAttackTotal; }
      const T &operator()() const { return thunderAttackTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct ThunderDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "thunder_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T thunderDefenseTotal;
      T &operator()() { return thunderDefenseTotal; }
      const T &operator()() const { return thunderDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct FireAttackTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "fire_attack_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T fireAttackTotal;
      T &operator()() { return fireAttackTotal; }
      const T &operator()() const { return fireAttackTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct FireDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "fire_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T fireDefenseTotal;
      T &operator()() { return fireDefenseTotal; }
      const T &operator()() const { return fireDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct IceAttackTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "ice_attack_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T iceAttackTotal;
      T &operator()() { return iceAttackTotal; }
      const T &operator()() const { return iceAttackTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct IceDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "ice_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T iceDefenseTotal;
      T &operator()() { return iceDefenseTotal; }
      const T &operator()() const { return iceDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct RottenAttackTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "rotten_attack_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T rottenAttackTotal;
      T &operator()() { return rottenAttackTotal; }
      const T &operator()() const { return rottenAttackTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct RottenDefenseTotal {
  struct _alias_t {
    static constexpr const char _literal[] = "rotten_defense_total";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T rottenDefenseTotal;
      T &operator()() { return rottenDefenseTotal; }
      const T &operator()() const { return rottenDefenseTotal; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
}// namespace PublicCharacter_

struct PublicCharacter
    : sqlpp::table_t<
              PublicCharacter, PublicCharacter_::Id,
              PublicCharacter_::AccountId, PublicCharacter_::Name,
              PublicCharacter_::Title, PublicCharacter_::Gender,
              PublicCharacter_::HairStyle, PublicCharacter_::Height,
              PublicCharacter_::HairColor, PublicCharacter_::SkinColor,
              PublicCharacter_::BirthdayMonth, PublicCharacter_::BirthdayDay,
              PublicCharacter_::Blood, PublicCharacter_::Place,
              PublicCharacter_::Job, PublicCharacter_::Face,
              PublicCharacter_::Personality, PublicCharacter_::Level,
              PublicCharacter_::Experience, PublicCharacter_::Rank,
              PublicCharacter_::Credits, PublicCharacter_::Faction,
              PublicCharacter_::Stage, PublicCharacter_::PositionX,
              PublicCharacter_::PositionY, PublicCharacter_::Orientation,
              PublicCharacter_::Head, PublicCharacter_::Body,
              PublicCharacter_::MainHand, PublicCharacter_::OffHand,
              PublicCharacter_::Hand, PublicCharacter_::Feet,
              PublicCharacter_::Back, PublicCharacter_::Ride,
              PublicCharacter_::Shape, PublicCharacter_::HpCurrent,
              PublicCharacter_::HpTotal, PublicCharacter_::MpCurrent,
              PublicCharacter_::MpTotal, PublicCharacter_::SpCurrent,
              PublicCharacter_::SpTotal, PublicCharacter_::Weight,
              PublicCharacter_::AttackBase, PublicCharacter_::AttackRight,
              PublicCharacter_::AttackLeft, PublicCharacter_::DefenseBase,
              PublicCharacter_::DefenseTotal,
              PublicCharacter_::SpellDefenseBase,
              PublicCharacter_::SpellDefenseTotal, PublicCharacter_::RigorBase,
              PublicCharacter_::RigorTotal, PublicCharacter_::AgilityBase,
              PublicCharacter_::AgilityTotal, PublicCharacter_::CriticalBase,
              PublicCharacter_::CriticalTotal, PublicCharacter_::StaminaBase,
              PublicCharacter_::StaminaTotal, PublicCharacter_::SoulDefenseBase,
              PublicCharacter_::SoulDefenseTotal,
              PublicCharacter_::ThunderAttackTotal,
              PublicCharacter_::ThunderDefenseTotal,
              PublicCharacter_::FireAttackTotal,
              PublicCharacter_::FireDefenseTotal,
              PublicCharacter_::IceAttackTotal,
              PublicCharacter_::IceDefenseTotal,
              PublicCharacter_::RottenAttackTotal,
              PublicCharacter_::RottenDefenseTotal> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.character";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicCharacter;
      T &operator()() { return publicCharacter; }
      const T &operator()() const { return publicCharacter; }
    };
  };
};
namespace PublicDatabasechangelog_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Author {
  struct _alias_t {
    static constexpr const char _literal[] = "author";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T author;
      T &operator()() { return author; }
      const T &operator()() const { return author; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Filename {
  struct _alias_t {
    static constexpr const char _literal[] = "filename";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T filename;
      T &operator()() { return filename; }
      const T &operator()() const { return filename; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Dateexecuted {
  struct _alias_t {
    static constexpr const char _literal[] = "dateexecuted";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T dateexecuted;
      T &operator()() { return dateexecuted; }
      const T &operator()() const { return dateexecuted; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
};
struct Orderexecuted {
  struct _alias_t {
    static constexpr const char _literal[] = "orderexecuted";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T orderexecuted;
      T &operator()() { return orderexecuted; }
      const T &operator()() const { return orderexecuted; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Exectype {
  struct _alias_t {
    static constexpr const char _literal[] = "exectype";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T exectype;
      T &operator()() { return exectype; }
      const T &operator()() const { return exectype; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
};
struct Md5Sum {
  struct _alias_t {
    static constexpr const char _literal[] = "md5sum";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T md5Sum;
      T &operator()() { return md5Sum; }
      const T &operator()() const { return md5Sum; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Description {
  struct _alias_t {
    static constexpr const char _literal[] = "description";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T description;
      T &operator()() { return description; }
      const T &operator()() const { return description; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Comments {
  struct _alias_t {
    static constexpr const char _literal[] = "comments";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T comments;
      T &operator()() { return comments; }
      const T &operator()() const { return comments; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Tag {
  struct _alias_t {
    static constexpr const char _literal[] = "tag";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T tag;
      T &operator()() { return tag; }
      const T &operator()() const { return tag; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Liquibase {
  struct _alias_t {
    static constexpr const char _literal[] = "liquibase";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T liquibase;
      T &operator()() { return liquibase; }
      const T &operator()() const { return liquibase; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Contexts {
  struct _alias_t {
    static constexpr const char _literal[] = "contexts";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T contexts;
      T &operator()() { return contexts; }
      const T &operator()() const { return contexts; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct Labels {
  struct _alias_t {
    static constexpr const char _literal[] = "labels";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T labels;
      T &operator()() { return labels; }
      const T &operator()() const { return labels; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
struct DeploymentId {
  struct _alias_t {
    static constexpr const char _literal[] = "deployment_id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T deploymentId;
      T &operator()() { return deploymentId; }
      const T &operator()() const { return deploymentId; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
}// namespace PublicDatabasechangelog_

struct PublicDatabasechangelog
    : sqlpp::table_t<PublicDatabasechangelog, PublicDatabasechangelog_::Id,
                     PublicDatabasechangelog_::Author,
                     PublicDatabasechangelog_::Filename,
                     PublicDatabasechangelog_::Dateexecuted,
                     PublicDatabasechangelog_::Orderexecuted,
                     PublicDatabasechangelog_::Exectype,
                     PublicDatabasechangelog_::Md5Sum,
                     PublicDatabasechangelog_::Description,
                     PublicDatabasechangelog_::Comments,
                     PublicDatabasechangelog_::Tag,
                     PublicDatabasechangelog_::Liquibase,
                     PublicDatabasechangelog_::Contexts,
                     PublicDatabasechangelog_::Labels,
                     PublicDatabasechangelog_::DeploymentId> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.databasechangelog";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicDatabasechangelog;
      T &operator()() { return publicDatabasechangelog; }
      const T &operator()() const { return publicDatabasechangelog; }
    };
  };
};
namespace PublicDatabasechangeloglock_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Locked {
  struct _alias_t {
    static constexpr const char _literal[] = "locked";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T locked;
      T &operator()() { return locked; }
      const T &operator()() const { return locked; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
};
struct Lockgranted {
  struct _alias_t {
    static constexpr const char _literal[] = "lockgranted";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T lockgranted;
      T &operator()() { return lockgranted; }
      const T &operator()() const { return lockgranted; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
};
struct Lockedby {
  struct _alias_t {
    static constexpr const char _literal[] = "lockedby";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T lockedby;
      T &operator()() { return lockedby; }
      const T &operator()() const { return lockedby; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
};
}// namespace PublicDatabasechangeloglock_

struct PublicDatabasechangeloglock
    : sqlpp::table_t<PublicDatabasechangeloglock,
                     PublicDatabasechangeloglock_::Id,
                     PublicDatabasechangeloglock_::Locked,
                     PublicDatabasechangeloglock_::Lockgranted,
                     PublicDatabasechangeloglock_::Lockedby> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.databasechangeloglock";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicDatabasechangeloglock;
      T &operator()() { return publicDatabasechangeloglock; }
      const T &operator()() const { return publicDatabasechangeloglock; }
    };
  };
};
namespace PublicInventoryitem_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Timestamp {
  struct _alias_t {
    static constexpr const char _literal[] = "timestamp";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T timestamp;
      T &operator()() { return timestamp; }
      const T &operator()() const { return timestamp; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct InventoryType {
  struct _alias_t {
    static constexpr const char _literal[] = "inventory_type";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T inventoryType;
      T &operator()() { return inventoryType; }
      const T &operator()() const { return inventoryType; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Entity {
  struct _alias_t {
    static constexpr const char _literal[] = "entity";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T entity;
      T &operator()() { return entity; }
      const T &operator()() const { return entity; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Slot {
  struct _alias_t {
    static constexpr const char _literal[] = "slot";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T slot;
      T &operator()() { return slot; }
      const T &operator()() const { return slot; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Item {
  struct _alias_t {
    static constexpr const char _literal[] = "item";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T item;
      T &operator()() { return item; }
      const T &operator()() const { return item; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Quantity {
  struct _alias_t {
    static constexpr const char _literal[] = "quantity";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T quantity;
      T &operator()() { return quantity; }
      const T &operator()() const { return quantity; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct ExpiresAfter {
  struct _alias_t {
    static constexpr const char _literal[] = "expires_after";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T expiresAfter;
      T &operator()() { return expiresAfter; }
      const T &operator()() const { return expiresAfter; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct ExpiresAt {
  struct _alias_t {
    static constexpr const char _literal[] = "expires_at";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T expiresAt;
      T &operator()() { return expiresAt; }
      const T &operator()() const { return expiresAt; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct RestEnabled {
  struct _alias_t {
    static constexpr const char _literal[] = "rest_enabled";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T restEnabled;
      T &operator()() { return restEnabled; }
      const T &operator()() const { return restEnabled; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
};
struct RestCount {
  struct _alias_t {
    static constexpr const char _literal[] = "rest_count";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T restCount;
      T &operator()() { return restCount; }
      const T &operator()() const { return restCount; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Bind {
  struct _alias_t {
    static constexpr const char _literal[] = "bind";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T bind;
      T &operator()() { return bind; }
      const T &operator()() const { return bind; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Hardiness {
  struct _alias_t {
    static constexpr const char _literal[] = "hardiness";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T hardiness;
      T &operator()() { return hardiness; }
      const T &operator()() const { return hardiness; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Intensifications {
  struct _alias_t {
    static constexpr const char _literal[] = "intensifications";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T intensifications;
      T &operator()() { return intensifications; }
      const T &operator()() const { return intensifications; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Piercings {
  struct _alias_t {
    static constexpr const char _literal[] = "piercings";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T piercings;
      T &operator()() { return piercings; }
      const T &operator()() const { return piercings; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
}// namespace PublicInventoryitem_

struct PublicInventoryitem
    : sqlpp::table_t<PublicInventoryitem, PublicInventoryitem_::Id,
                     PublicInventoryitem_::Timestamp,
                     PublicInventoryitem_::InventoryType,
                     PublicInventoryitem_::Entity, PublicInventoryitem_::Slot,
                     PublicInventoryitem_::Item, PublicInventoryitem_::Quantity,
                     PublicInventoryitem_::ExpiresAfter,
                     PublicInventoryitem_::ExpiresAt,
                     PublicInventoryitem_::RestEnabled,
                     PublicInventoryitem_::RestCount,
                     PublicInventoryitem_::Bind,
                     PublicInventoryitem_::Hardiness,
                     PublicInventoryitem_::Intensifications,
                     PublicInventoryitem_::Piercings> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.inventoryitem";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicInventoryitem;
      T &operator()() { return publicInventoryitem; }
      const T &operator()() const { return publicInventoryitem; }
    };
  };
};
namespace PublicSkills_ {
struct Id {
  struct _alias_t {
    static constexpr const char _literal[] = "id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T id;
      T &operator()() { return id; }
      const T &operator()() const { return id; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct CharacterId {
  struct _alias_t {
    static constexpr const char _literal[] = "character_id";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T characterId;
      T &operator()() { return characterId; }
      const T &operator()() const { return characterId; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Type {
  struct _alias_t {
    static constexpr const char _literal[] = "type";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T type;
      T &operator()() { return type; }
      const T &operator()() const { return type; }
    };
  };
  using _traits =
          sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
};
struct Level {
  struct _alias_t {
    static constexpr const char _literal[] = "level";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T level;
      T &operator()() { return level; }
      const T &operator()() const { return level; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Experience {
  struct _alias_t {
    static constexpr const char _literal[] = "experience";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T experience;
      T &operator()() { return experience; }
      const T &operator()() const { return experience; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
};
struct Active {
  struct _alias_t {
    static constexpr const char _literal[] = "active";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T active;
      T &operator()() { return active; }
      const T &operator()() const { return active; }
    };
  };
  using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::can_be_null>;
};
}// namespace PublicSkills_

struct PublicSkills
    : sqlpp::table_t<PublicSkills, PublicSkills_::Id,
                     PublicSkills_::CharacterId, PublicSkills_::Type,
                     PublicSkills_::Level, PublicSkills_::Experience,
                     PublicSkills_::Active> {
  struct _alias_t {
    static constexpr const char _literal[] = "public.skills";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template<typename T>
    struct _member_t {
      T publicSkills;
      T &operator()() { return publicSkills; }
      const T &operator()() const { return publicSkills; }
    };
  };
};
}// namespace postgresql
}// namespace login
}// namespace openao
#endif
