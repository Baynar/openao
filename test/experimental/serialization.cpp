#include <gtest/gtest.h>

#include <typeindex>
#include <typeinfo>

#include "experimental/events/game/message.h"

using namespace openao::experimental;

TEST(Serialization, Serialization_Message_Test) {
  events::game::Message message;
  message.entity = 1;
  message.name = "openao";
  message.text = "this is experimental";

  BinaryBuffer buffer;
  message.serialize(buffer);

  uint8_t result[] = {
          0x01, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x6f, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
          0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65,
          0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00,
  };

  EXPECT_EQ(0, std::memcmp(buffer.data(), result, sizeof(result)));
}

TEST(Serialization, Deserialization_Message_Test) {
  uint8_t result[] = {
          0x01, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x6f, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
          0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65,
          0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00,
  };

  BinaryBuffer buffer{};
  buffer.write((char *) result, sizeof(result));

  auto m = buffer.read<events::game::Message>();

  EXPECT_EQ(m.entity, 1);
  EXPECT_EQ(0, std::strcmp(m.name.c_str(), "openao"));
  EXPECT_EQ(0, std::strcmp(m.text.c_str(), "this is experimental"));
}