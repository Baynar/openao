
#include <gtest/gtest.h>

#include "experimental/reactor.h"

#include "experimental/game/chat/chatmessagecommand.h"
#include "experimental/serialization/deserializer.h"


using namespace openao::experimental;
using namespace openao::experimental::serialization;
using openao::experimental::Reactor;

using namespace openao::experimental::game::chat;

TEST(Reactor, Complet) {

  Reactor reactor;
  reactor.add<ChatMessageCommand>([](const ChatMessageCommand &m) {
    std::cout << std::string(m.text.c_str()) << std::endl;
  });

  uint8_t data[] = {0x0e, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F,
                    0x72, 0x6C, 0x64, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00};

  BinaryBuffer buffer{};
  buffer.write((char *) data, sizeof(data));

  Deserializer deserializer;
  deserializer.insert<ChatMessageCommand>(14);

  auto [type, event] = deserializer.deserialize(buffer);
  reactor.react(type, *event);
}
